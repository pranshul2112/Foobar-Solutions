def breadthfirst(matrix, source, destination):
    visited = [-1 for i in range(len(matrix))]
    visited[source] = source
    queue = [source]
    while len(queue) > 0:
        top = queue.pop(0)
        for i in range(len(matrix)):
            if (matrix[top][i][1] - matrix[top][i][0]) != 0 and visited[i] == -1:
                if i == destination:

                    visited[destination] = top
                    path = [destination]
                    temp = destination
                    while temp != source:
                        temp = visited[temp]
                        path.append(temp)
                    path.reverse()

                    temp = 1
                    total = float("inf")
                    cur = source
                    while temp != len(path):
                        entry = matrix[cur][path[temp]]
                        diff = abs(entry[1]) - entry[0]
                        total = min(total, diff)
                        cur = path[temp]
                        temp += 1
                    temp = 1
                    cur = source
                    while temp != len(path):
                        entry = matrix[cur][path[temp]]
                        if entry[1] < 0:
                            entry[1] += total
                        else:
                            entry[0] += total
                        entry = matrix[path[temp]][cur]
                        if entry[1] <= 0:
                            entry[1] -= total
                        else:
                            entry[0] += total
                        cur = path[temp]
                        temp += 1
                    return True
                else:
                    visited[i] = top
                    queue.append(i)
    return False

def solution(entrances, exits, path):
    max_value = sum(list(map(sum, path)))
    augment = []
    for i in range(len(path)):
        augment.append([])
        for j in range(len(path[i])):
            augment[i].append([0, path[i][j]])
        augment[i].append([0, 0])
        if i in exits:
            augment[i].append([0, max_value])
        else:
            augment[i].append([0, 0])
    augment.append([])
    augment.append([])
    for i in range(len(path[0]) + 2):
        if i in entrances:
            augment[-2].append([0, max_value])
        else:
            augment[-2].append([0, 0])
        augment[-1].append([0, 0])
    while breadthfirst(augment, len(augment) - 2, len(augment) - 1):
            pass
    total = 0
    for i in range(len(augment)):
            total += augment[-2][i][0]
    return total